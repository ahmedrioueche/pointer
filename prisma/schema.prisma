// This is the Prisma schema file.
// Read more about it in the Prisma documentation: https://pris.ly/d/schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Parent {
  id                      Int       @id @default(autoincrement())
  firstName               String?   @map("first_name")
  lastName                String?   @map("last_name")
  email                   String    @unique
  username                String?   @unique
  password                String
  isVerified              Boolean?  @map("is_verified")
  isFreeTrial             Boolean?  @map("is_free_trial")
  age                     Int?
  gender                  String?
  childrenCount           Int?      @map("children_count")                                  
  subscriptionType        String?   @map("subscription_type")
  subscriptionStartDate   DateTime? @map("subscription_start_date")
  subscriptionEndDate     DateTime? @map("subscription_end_date")
  isSubscriptionActive    Boolean?  @map("is_subscription_active")
  paymentMethod           String?   @map("payment_method")
  lastPaymentDate         DateTime? @map("last_payment_date")
  subscriptionPrice       Float?    @map("subscription_price")
  createdAt               DateTime? @map("created_at") @default(now())
  
  // Relations
  tasks                   Task[]
  sentNotifications       Notification[] @relation("ParentSentNotifications")
  receivedNotifications   Notification[] @relation("ParentReceivedNotifications")
  children                Child[]   @relation("ParentChildren")
}

model Child {
  id                      Int      @id @default(autoincrement())
  parentId                Int?     @map("parent_id")
  name                    String
  age                     Int
  gender                  String
  hasDevice               Boolean?  @map("has_device")
  usesSharedDevice        Boolean?  @map("uses_shared_device")
  username                String?   @unique
  email                   String?   @unique
  password                String?
  competence              String?   @default("beginner")
  budget                  Int?     @default(0)
  currentPoints           Int?     @default(0) @map("current_points")
  totalPoints             Int?     @default(0) @map("total_points")
  rewardsEarned           Int?     @default(0) @map("rewards_earned")
  tasksAssigned           Int?     @default(0) @map("tasks_assigned")
  tasksCompleted          Int?     @default(0) @map("tasks_completed")
  level                   String?   @default("silver")
  quizzesCorrectAnswersCount Int?  @default(0) @map("quizzes_correct_answers_count")
  quizzesTotalPoints      Int?     @default(0) @map("quizzes_total_points")
  createdAt               DateTime @default(now()) @map("created_at")
  avatar                  String?
  
  // Relations
  taskAssignments         TaskAssignment[] @relation("ChildAssignments")
  rewardClaimRecords      RewardClaim[]    @relation("ChildRewardClaims")
  sentNotifications       Notification[]   @relation("ChildSentNotifications")
  receivedNotifications   Notification[]   @relation("ChildReceivedNotifications")
  parent                  Parent?   @relation("ParentChildren", fields: [parentId], references: [id])
}

model Task {
  id           Int       @id @default(autoincrement())
  name         String
  description  String?
  points       Int?
  creatorId    Int       @map("creator_id")
  creator      Parent    @relation(fields: [creatorId], references: [id])
  creatorName  String?   @map("creator_name")
  creationDate DateTime? @map("creation_date")
  type         String?
  taskAssignments TaskAssignment[] @relation("TaskAssignments")
}

model TaskAssignment {
  id                 Int       @id @default(autoincrement())
  task               Task      @relation("TaskAssignments", fields: [taskId], references: [id])
  taskId             Int       @map("task_id")
  child              Child     @relation("ChildAssignments", fields: [childId], references: [id])
  childId            Int       @map("child_id")
  assignedBy         Int?      @map("assigned_by")
  assignedByName     String?   @map("assigned_by_name")
  assignmentDate     DateTime? @map("assignment_date")
  dueDate            DateTime? @map("due_date")
  routineTime        String?   @map("routine_time")
  routineExceptions  String?   @map("routine_exceptions")
  isCompleted        Boolean?  @map("is_completed")
  isApproved         Boolean?  @map("is_approved")
  completionDate     DateTime? @map("completion_date")
  approvalDate       DateTime? @map("approval_date")
  approvedBy         Int?      @map("approved_by")
  approvedByName     String?   @map("approved_by_name")
  creatorComment     String?   @map("creator_comment")
  creatorCommentDate DateTime? @map("creator_comment_date")
  createdForComment  String?   @map("createdFor_comment")
  attachedFiles      String?   @map("attached_files")

  @@unique([taskId, childId])
  @@map("task_assignment")
}

model Reward {
  id            Int       @id @default(autoincrement()) @map("id")
  name          String    @map("name")
  points        Int       @map("points")
  icon          String?   @map("icon")
  creationDate  DateTime? @map("creation_date")
  creatorId     Int?      @map("creator_id")
  creatorName   String?   @map("creator_name")
  isClaimed     Boolean?  @map("is_claimed")
  description   String?
  attachedFiles String?   @map("attached_files")

  // Relations
  rewardClaims RewardClaim[]
}

model RewardClaim {
  id                 Int       @id @default(autoincrement()) @map("id")
  rewardId           Int       @map("reward_id")
  childId            Int       @map("child_id")
  childName          String?   @map("child_name")
  claimedAt          DateTime? @map("claimed_at")
  isApproved         Boolean?  @map("is_approved")
  approvedBy         Int?      @map("approved_by")
  approvedByName     String?   @map("approved_by_name")
  approvedAt         DateTime? @map("approved_at")
  claimComment       String?   @map("claim_comment")
  approveComment     String?   @map("approve_comment")
  approveCommentDate DateTime? @map("approve_comment_date")

  // Relations
  reward Reward @relation(fields: [rewardId], references: [id])
  child  Child  @relation("ChildRewardClaims", fields: [childId], references: [id])

  @@map("reward_claim")
}
model Notification {
  id           Int      @id @default(autoincrement())
  title        String?
  content      String
  type         String?
  description  String?
  createdAt    DateTime @default(now()) @map("created_at")
  isRead       Boolean? @map("is_read")
  senderId     Int @map("sender_id")
  senderName   String? @map("sender_name")
  receiverId   Int @map("receiver_id")
  receiverName String? @map("receiver_name")
  receiverType String? @map("receiver_type")
  icon         String?

  // Relations
  parentSender   Parent? @relation("ParentSentNotifications", fields: [senderId], references: [id], map: "FK_Parent_Sender")
  parentReceiver Parent? @relation("ParentReceivedNotifications", fields: [receiverId], references: [id], map: "FK_Parent_Receiver")
  childSender    Child?  @relation("ChildSentNotifications", fields: [senderId], references: [id], map: "FK_Child_Sender")
  childReceiver  Child?  @relation("ChildReceivedNotifications", fields: [receiverId], references: [id], map: "FK_Child_Receiver")
}

model Setting {
  id                Int       @id @default(autoincrement()) @map("id")
  parentId          Int?      @unique @map("parent_id")
  currency          String?   @default("dollar")
  pointsPerCurrency Int?      @map("points_per_currency")
  language          String?   @default("english")
}

model Challenge {
  id          Int       @id @default(autoincrement()) @map("id")
  parentId    Int       @map("parent_id")
  name        String
  description String?  
  points      Int
  assignedTo  String?   @map("assigned_to")             // string of children ids
  image       String?   
  time        DateTime? 
  rewards     String?
}

model Quiz {
  id                Int           @id @default(autoincrement()) @map("id")
  topic             String?    
  childId           Int?          @map("child_id")
  parentId          Int?          @map("parent_id")
  question          String?
  options           String?  
  correctAnswer     String?       @map("correct_answer") 
  points            Int?
  isAnsweredCorrectly Boolean?    @map("is_answered_correctly")
  childAnswer       String?       @map("child_answer")
  creationDate      DateTime?     @map("creation_date")
  completionDate    DateTime?     @map("completion_date")
}

model Test {  
  id                Int           @id @default(autoincrement()) @map("id")
  createdAt      DateTime?     @map("creation_date")
  name             String?
}
