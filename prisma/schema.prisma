generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")  
}

model Parent {
  id                       Int       @id @default(autoincrement())
  first_name               String?
  last_name                String?
  email                    String    @unique
  username                 String?   @unique
  password                 String
  is_verified              Boolean?
  is_free_trial            Boolean?
  age                      Int?
  gender                   String?
  children_count           Int?
  subscription_type        String?
  subscription_start_date  DateTime?
  subscription_end_date    DateTime?
  is_subscription_active   Boolean?
  payment_method           String?
  last_payment_date        DateTime?
  subscription_price       Float?
  created_at               DateTime  @default(now())
  children                 Child[]
  taskAssignments          TaskAssignment[] @relation("AssignedByParent")
  notificationsSent        Notification[]   @relation("ParentSender")
  notificationsReceived    Notification[]   @relation("ParentReceiver")
  settings                 Setting?

  @@map("parent")  // Optional, to map to lower case "parent" if needed
}

model Child {
  id                       Int       @id @default(autoincrement())
  parent_id                Int?      @relation(fields: [parent_id], references: [id], onDelete: SetNull)
  name                     String
  age                      Int
  gender                   String?
  has_device               Boolean?
  uses_shared_device       Boolean?
  username                 String?   @unique
  email                    String?   @unique
  password                 String?
  competence               String    @default("beginner")
  budget                   Int       @default(0)
  current_points           Int       @default(0)
  total_points             Int       @default(0)
  rewards_earned           Int       @default(0)
  tasks_assigned           Int       @default(0)
  tasks_completed          Int       @default(0)
  level                    String    @default("silver")
  quizzes_correct_answers_count Int  @default(0)
  quizzes_total_points      Int      @default(0)
  created_at               DateTime  @default(now())
  avatar                   String?
  tasks                    TaskAssignment[] @relation("AssignedToChild")
  notificationsSent        Notification[]   @relation("ChildSender")
  notificationsReceived    Notification[]   @relation("ChildReceiver")
  quizzes                  Quiz[]

  @@map("child")  // Optional, to map to lower case "child" if needed
}

model Task {
  id             Int       @id @default(autoincrement())
  name           String
  description    String?
  points         Int?
  creator_id     Int?      @relation(fields: [creator_id], references: [id], onDelete: Cascade)
  creator_name   String?
  creation_date  DateTime?
  type           String?
  assignments    TaskAssignment[]

  @@map("task")  // Optional, to map to lower case "task" if needed
}

model TaskAssignment {
  id               Int       @id @default(autoincrement())
  task_id          Int       @relation(fields: [task_id], references: [id], onDelete: Cascade)
  child_id         Int       @relation(fields: [child_id], references: [id], onDelete: Cascade)
  assigned_by      Int?
  assigned_by_name String?
  assignment_date  DateTime?
  due_date         DateTime?
  routine_time     String?
  routine_exceptions String?
  is_completed     Boolean?
  is_approved      Boolean?
  completion_date  DateTime?
  approval_date    DateTime?
  approved_by      Int?
  approved_by_name String?
  creator_comment  String?
  creator_comment_date DateTime?
  createdFor_comment String?
  attached_files   String?

  @@unique([task_id, child_id])
  @@map("task_assignment")  // Optional, to map to lower case "task_assignment" if needed
}

model Reward {
  id               Int       @id @default(autoincrement())
  name             String
  points           Int?
  icon             String?
  creation_date    DateTime?
  creator_id       Int?
  creator_name     String?
  is_claimed       Boolean?
  description      String?
  attached_files   String?
  claims           RewardClaim[]

  @@map("reward")  // Optional, to map to lower case "reward" if needed
}

model RewardClaim {
  id                Int       @id @default(autoincrement())
  reward_id         Int       @relation(fields: [reward_id], references: [id], onDelete: Cascade)
  child_id          Int       @relation(fields: [child_id], references: [id], onDelete: Cascade)
  child_name        String?
  claimed_at        DateTime?
  is_approved       Boolean?
  approved_by       Int?
  approved_by_name  String?
  approved_at       DateTime?
  claim_comment     String?
  approve_comment   String?
  approve_comment_date DateTime?

  @@map("reward_claim")  // Optional, to map to lower case "reward_claim" if needed
}

model Notification {
  id                Int       @id @default(autoincrement())
  title             String
  content           String
  type              String?
  description       String?
  created_at        DateTime  @default(now())
  is_read           Boolean?
  sender_id         Int?
  sender_name       String?
  receiver_id       Int?
  receiver_name     String?
  receiver_type     String?
  icon              String?
  
  parent_sender_id  Int?      @relation("ParentSender", fields: [parent_sender_id], references: [id], onDelete: SetNull)
  parent_receiver_id Int?     @relation("ParentReceiver", fields: [parent_receiver_id], references: [id], onDelete: SetNull)
  child_sender_id   Int?      @relation("ChildSender", fields: [child_sender_id], references: [id], onDelete: SetNull)
  child_receiver_id Int?      @relation("ChildReceiver", fields: [child_receiver_id], references: [id], onDelete: SetNull)

  @@map("notification")  // Optional, to map to lower case "notification" if needed
}

model Setting {
  id                Int       @id @default(autoincrement())
  parent_id         Int       @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  currency          String    @default("dollar")
  points_per_currency Int?
  language          String    @default("english")

  @@map("setting")  // Optional, to map to lower case "setting" if needed
}

model Challenge {
  id                Int       @id @default(autoincrement())
  parent_id         Int       @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  name              String
  description       String?
  points            Int?
  assigned_to       String?
  image             String?
  time              DateTime?
  rewards           String?

  @@map("challenge")  // Optional, to map to lower case "challenge" if needed
}

model Quiz {
  id                Int       @id @default(autoincrement())
  topic             String
  child_id          Int?      @relation(fields: [child_id], references: [id], onDelete: SetNull)
  parent_id         Int?      @relation(fields: [parent_id], references: [id], onDelete: SetNull)
  question          String
  options           String
  correct_answer    String
  points            Int?
  is_answered_correctly Boolean?
  child_answer      String?
  creation_date     DateTime

  @@map("quiz")  // Optional, to map to lower case "quiz" if needed
}
