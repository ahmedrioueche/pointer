// This is the Prisma schema file.
// Read more about it in the Prisma documentation: https://pris.ly/d/schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Parent {
  id                      Int       @id @default(autoincrement())
  firstName              String?    @db.VarChar(255)                  @map("first_name")
  lastName               String?    @db.VarChar(255)                  @map("last_name")
  email                   String    @unique @db.VarChar(255)       
  username                String?   @unique @db.VarChar(255)
  password                String    @db.VarChar(255)
  isVerified             Boolean?                                    @map("is_verified")
  isFreeTrial            Boolean?                                    @map("is_free_trial")
  age                     Int?
  gender                  String?
  childrenCount          Int?                                        @map("children_count")                                    
  subscriptionType       String?                                     @map("subscription_type")
  subscriptionStartDate DateTime?        @map("subscription_start_date")
  subscriptionEndDate   DateTime?        @map("subscription_end_date")
  isSubscriptionActive  Boolean?         @map("is_subscription_active")
  paymentMethod          String?         @map("payment_method")
  lastPaymentDate       DateTime?        @map("last_payment_date")
  subscriptionPrice      Float?          @map("subscription_price")
  createdAt               DateTime?   @map("created_at")
  
  tasks                 Task[]
  sentNotifications     Notification[] @relation("ParentSentNotifications")
  receivedNotifications Notification[] @relation("ParentReceivedNotifications")
}

model Child {
  id                 Int      @id @default(autoincrement())
  parent_id          Int?
  name               String   @db.VarChar(255)
  age                Int
  gender             String   @db.VarChar(10)
  has_device         Boolean?
  uses_shared_device Boolean?
  username           String?  @unique @db.VarChar(255)
  email              String?  @unique
  password           String?  @db.VarChar(255)
  competence         String?  @default("beginner") @db.VarChar(50)
  budget             Int?     @default(0)
  currentPoints      Int?     @default(0) @map("current_points")
  totalPoints        Int?     @default(0) @map("total_points")
  rewardsEarned      Int?     @default(0) @map("rewards_earned")
  tasksAssigned      Int?     @default(0) @map("tasks_assigned")
  tasksCompleted     Int?     @default(0) @map("tasks_completed")
  level              String?  @default("silver") @db.VarChar(50)
  quizzesCorrectAnswersCount Int?  @default(0) @map("quizzes_correct_answers_count")
  quizzesTotalPoints Int?          @default(0) @map("quizzes_total_points")
  created_at         DateTime @default(now()) @db.Timestamp(6)
  icon               String?
  
  // Relations
  taskAssignments       TaskAssignment[] @relation("ChildAssignments")
  rewardClaimRecords    RewardClaim[]    @relation("ChildRewardClaims")
  sentNotifications     Notification[]   @relation("ChildSentNotifications")
  receivedNotifications Notification[]   @relation("ChildReceivedNotifications")
}

model Task {
  id           Int       @id @default(autoincrement())
  name         String
  description  String?
  points       Int?
  creatorId    Int       @map("creator_id")
  creator      Parent    @relation(fields: [creatorId], references: [id])
  creatorName  String?   @map("creator_name")
  creationDate DateTime? @map("creation_date")
  type         String?
  taskAssignments TaskAssignment[] @relation("TaskAssignments")
}

model TaskAssignment {
  id                 Int       @id @default(autoincrement())
  task               Task      @relation("TaskAssignments", fields: [taskId], references: [id])
  taskId             Int       @map("task_id")
  child              Child     @relation("ChildAssignments", fields: [childId], references: [id])
  childId            Int       @map("child_id")
  assignedBy         Int?      @map("assigned_by")
  assignedByName     String?   @map("assigned_by_name")
  assignmentDate     DateTime? @map("assignment_date")
  dueDate            DateTime? @map("due_date")
  routineTime        String?   @map("routine_time")
  routineExceptions  String?   @map("routine_exceptions")
  isCompleted        Boolean?  @map("is_completed")
  isApproved         Boolean?  @map("is_approved")
  completionDate     DateTime? @map("completion_date")
  approvalDate       DateTime? @map("approval_date")
  approvedBy         Int?      @map("approved_by")
  approvedByName     String?   @map("approved_by_name")
  creatorComment     String?   @map("creator_comment")
  creatorCommentDate DateTime? @map("creator_comment_date")
  createdForComment  String?   @map("createdFor_comment")
  attachedFiles      String?   @map("attached_files")

  @@unique([taskId, childId])
  @@map("task_assignment")
}

model Reward {
  id            Int       @id @default(autoincrement()) @map("id")
  name          String    @map("name")
  points        Int       @map("points")
  icon          String?   @map("icon")
  creationDate  DateTime? @map("creation_date") @db.DateTime
  creatorId     Int?      @map("creator_id")
  creatorName   String?   @map("creator_name")
  isClaimed     Boolean?  @map("is_claimed")
  description   String?
  attachedFiles String?   @map("attached_files")

  // Relations
  rewardClaims RewardClaim[]
}

model RewardClaim {
  id                 Int       @id @default(autoincrement()) @map("id")
  rewardId           Int       @map("reward_id")
  childId            Int       @map("child_id")
  childName          String?   @map("child_name")
  claimedAt          DateTime? @map("claimed_at") @db.DateTime
  isApproved         Boolean?  @map("is_approved")
  approvedBy         Int?      @map("approved_by")
  approvedByName     String?   @map("approved_by_name")
  approvedAt         DateTime? @map("approved_at") @db.DateTime
  claimComment       String?   @map("claim_comment")
  approveComment     String?   @map("approve_comment")
  approveCommentDate DateTime? @map("approve_comment_date")

  // Relations
  reward Reward @relation(fields: [rewardId], references: [id])
  child  Child  @relation("ChildRewardClaims", fields: [childId], references: [id])

  @@map("reward_claim")
}

model Notification {
  id           Int      @id @default(autoincrement())
  title        String?
  content      String
  type         String?
  description  String?
  createdAt    DateTime @default(now()) @db.Timestamp(6)  @map("created_at")
  isRead       Boolean?                                   @map("is_read")
  senderId     Int                                        @map("sender_id")
  senderName   String?                                    @map("sender_name")
  receiverId   Int                                        @map("receiver_id")
  receiverName String?                                    @map("receiver_name")
  receiverType String?                                    @map("receiver_type")
  icon         String?                   

  // Relations
  parentSender   Parent? @relation("ParentSentNotifications", fields: [senderId], references: [id], map: "Notification_parentSender_fkey")
  parentReceiver Parent? @relation("ParentReceivedNotifications", fields: [receiverId], references: [id], map: "Notification_parentReceiver_fkey")
  childSender    Child?  @relation("ChildSentNotifications", fields: [senderId], references: [id], map: "Notification_childSender_fkey")
  childReceiver  Child?  @relation("ChildReceivedNotifications", fields: [receiverId], references: [id], map: "Notification_childReceiver_fkey")
}

model Setting {
  id                Int       @id @default(autoincrement()) @map("id")
  parentId          Int?      @unique @map("parent_id")
  currency          String?   @default("dollar")
  pointsPerCurrency Int?      @map("points_per_currency")
  language          String?   @default("english")
}

model Challenge {
  id          Int       @id @default(autoincrement()) @map("id")
  parentId    Int          @map("parent_id")
  name        String
  description String?  
  points      Int
  assignedTo  String?      @map("assigned_to")             //string of children ids
  image       String?   
  time        DateTime? 
  rewards     String?
}

model Quiz {
  id          Int           @id @default(autoincrement()) @map("id")
  topic       String?    
  childId     Int?          @map("child_id")
  parentId    Int?          @map("parent_id")
  question    String?
  options     String?  
  correctAnswer String?     @map("correct_answer") 
  points      Int?
  isAnsweredCorrectly Boolean?   @map("is_answered_correctly")
  childAnswer    String?         @map("child_answer")
  creationDate DateTime?    @map("creation_date") 
}

